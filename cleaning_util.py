import string
import numpy as np
import pandas as pd
import unidecode

def translate_non_alphanumerics(to_translate, translate_to=u''):
    # https://stackoverflow.com/a/1324274/2491761
    not_letters = u'!"#%\'()&*+,-./:;<=>?@[\]^_`{|}~0123456789'
    if isinstance(to_translate, unicode):
        #print "unicode instance"
        translate_table = dict((ord(char), unicode(translate_to)) for char in not_letters)
    else:
        #print "not unicode instance"
        assert isinstance(to_translate, str)
        #translate_table = string.maketrans(not_letters, translate_to *len(not_letters))
        return to_translate.translate(None, string.punctuation + string.digits)
    return to_translate.translate(translate_table)

def extract_ingredients(full_ingred_list, strip_punct=True):
    # From: https://en.wikibooks.org/wiki/Cookbook:Units_of_measurement
    meas_units = [
        'teaspoon', 'teaspoons',
        't',
        'tsp', 'tsps',
        'tablespoon','tablespoons',
        'tbl',
        'tbs',
        'tbsp', 'tbsps',
        'fl', 'fluid',
        'oz', 'ozs',
        'ounce', 'ounces',
        'cup', 'cups',
        'c',
        'pint', 'pints',
        'p',
        'pt',
        'quart', 'quarts',
        'qt', 'qts',
        'q', 'qs',
        'gallon', 'gallons',
        'gal', 'gals',
        'jiggers', 'jigger',
        'ml',
        'milliliter', 'milliliters',
        'millilitre', 'millilitres',
        'cc',
        'l',
        'liter', 'liters',
        'litre', 'litres',
        'pinch', 'pinches',        
        'pound', 'pounds',
        'lb', 'lbs',
        'mg', 'mgs',
        'milligram', 'milligrams',
        'milligramme', 'milligrammes',
        'g', 'gs',
        'gram', 'grams',
        'gramme', 'grammes',
        'kg', 'kgs',
        'kilogram', 'kilograms',
        'kilogramme', 'kilogrammes',
        'mm', 'mms',
        'millimeter', 'millimeters',
        'millimetre', 'millimetres',
        'cm', 'cms',
        'centimeter', 'centimeters',
        'centimetre', 'centimetres',
        'm', 'ms',
        'meter', 'meters',
        'metre', 'metres',
        'inch', 'inches',
        'in', 'ins',
        ###
        'loaf', 'loaves',
        'pouch', 'pouches',
        'wedge', 'wedges',
        'drop', 'drops',
        'amount', 'amounts',
        'bulk', 'bulks',
        'coating', 'coatings',
        'carton', 'cartons',
        'count',
        'dusting', 'dustings',
        'roll', 'rolls',
        'hint', 'hints',
        'round', 'rounds',
        'cube', 'cubes',
        'husk', 'husks',
        'envelope', 'envelopes',
        'container', 'containers',
        'dash', 'dashes',
        'bitesize', 'bitesized',
        'bite', 'sized',
        'size',
        'each',
        'taste', 'desired',
        'can', 'cans',
        'unit', 'units',
        'box', 'boxes',
        'tub', 'tubs',
        'slab', 'slabs',
        'sprig', 'sprigs',
        'stalk', 'stalks',
        'matchstick', 'matchsticks',
        'balls',
        'clove', 'cloves',
        'slice', 'slices',
        'head', 'heads',
        'spear', 'spears',
        'chunk', 'chunks',
        'piece', 'pieces',
        'jar', 'jars',
        'package', 'packages',
        'pack', 'packs',
        'packet', 'packets',
        'bunch', 'bunches',
        'tube', 'tubes',
        'jug', 'jugs',
        'bottle', 'bottles',
        'stick', 'sticks',
        'strip', 'strips',
        'bag', 'bags',
        'dash', 'dashes',
        'container', 'containers',
        'envelope', 'envelopes',
        'sleeve', 'sleeves',
        'rounds',
        'sheet', 'sheets',
        'squares',
        'semicircles', 'semicircle',
        'circles', 'circle',
        'moons', 'halfmoons',
        'strands', 'strands',
        'ribbons', 'ribbon',
        'whole',
        'extra', 'extras',
        'dozen', 'dozens',
        'half', 'halves',
        'third', 'thirds',
        'fourth', 'fourths',
        'quarter', 'quarters',
        'fifth', 'fifths',
        'eighth', 'eighths',
    ]
    
    preparatory_descriptions = [
        'baked',
        'beat', 'beaten', 'wellbeaten',
        'blanched',
        'blended',
        'boiled',
        'bottled',
        'broiled',
        'broken',
        'browned',
        'canned',
        'chilled',
        'chipped',
        'chopped',
        'cleaned',
        'converted',
        'cooked',
        'cooled',
        'cored',
        'crispcooked',
        'crumbled',
        'crushed',
        'cubed',
        'cut',
        'defrosted',
        'deshelled',
        'desilked',
        'deveined',
        'diced', 'dice',
        'dissolved',
        'divided',
        'drained',
        'dried',
        'filleted',
        'filtered',
        'flaked',
        'fresh',
        'fried',
        'frozen',
        'grated',
        'grilled',
        'ground',
        'halved',
        'hardened',
        'heated',
        'hulled',
        'husked',
        'individual',
        'jarred',
        'juiced',
        'julienned', 'julienne', 'juliennecut', 'juliennesliced',
        'kneaded', 'kneading',
        'marinated',
        'mashed',
        'matchstickcut',
        'melted',
        'microwaved',
        'minced',
        'mixed',
        'opened',
        'packed',
        'peeled',
        'pitted',
        'pounded',
        'prepared',
        'pressed',
        'prewashed',
        'processed',
        'pulled',
        'quartered',
        'raw',
        'refrigerated',
        'removed',
        'rinsed',
        'ripe',
        'ripened',
        'ripped',
        'roasted',
        'rolled', 'rolling',
        'salted',
        'saved',
        'scored',
        'scrubbed',
        'seasoned',
        'sectioned',
        'seeded',
        'separated',
        'shaved',
        'shelled',
        'shredded',
        'shucked',
        'sifted',
        'smashed',
        'smoked',
        'snipped',
        'sliced',
        'slivered',
        'softened',
        'split',
        'squeezed',
        'steamed',
        'stemmed',
        'strained',
        'soaked',
        'sweetened',
        'thawed',
        'toasted',
        'torn',
        'trimmed',
        'uncored',
        'uncooked',
        'undrained',
        'unhusked',
        'unopened',
        'unpeeled',
        'unsalted',
        'unsweetened',
        'unwashed',
        'unwrapped',
        'use', 'used',
        'warmed',
        'washed',
        'wrapped',
        'zested',
    ]
    
    other_words_to_filter = [
        # articles:
        'a', 'an', 'the',
        # adverbs:
        'accordingly', 'according',
        'all',
        'approximately',
        'artificially ',
        'coarsely',
        'crisply',
        'crosswise',
        'diagonally', 
        'finely',
        'freshly',
        'horizontally',
        'left',
        'lengthwise', 
        'lightly',
        'like',
        'moreorless ',
        'nearly',
        'overnight',
        'piecewise',
        'plus',
        'right',
        'roughly',
        'sideways',
        'slightly',
        'stiffly',
        'then',
        'thickly',
        'thinly',
        'vertically',
        'very',
        'well',
        'widthwise', 
        # adjectives:
        'additional ',
        'aged',
        'allpurpose',
        'another',
        'any',
        'best',
        'boneless',
        'certified',
        'chunky',
        'classic',
        'coarse', 
        'cold',
        'complete',
        'crisp',
        'diagonal',
        'discarded',
        'dry',
        'extralarge',
        'extrasmall', 
        'even',
        'fatfree',
        'favourite', 'favorite',
        'fine', 
        'firm',
        'flat',
        'fresh',
        'hard',
        'hot',
        'inchesthick', 'inchthick',
        'included',
        'inner',
        'jumbo',
        'large', 
        'lean',
        'leftover',
        'less',
        'long',
        'lowcalorie',
        'lowfat',
        'lowsodium',
        'matchsticksize',
        'medium',
        'moist',
        'more',
        'multicolored',
        'natural',
        'needed',
        'new',
        'nonfat',
        'old',
        'oldfashioned',
        'only',
        'optional',
        'organic',
        'original',
        'other',
        'outer',
        'pure',
        'real',
        'reduced',
        'reserved',
        'rough',
        'sharp',
        'short',
        'skinless',
        'small',
        'stale',
        'soft',
        'such',
        'supreme',
        'thick',
        'thickcut',
        'thicklycut',
        'thicklysliced',
        'thicksliced',
        'thin',
        'thincut',
        'thinlycut',
        'thinlysliced',
        'thinsliced',
        'tough',
        'young',
        'your',
        # prepositions:
        'about',
        'above',
        'across',
        'against',
        'apart',
        'as',
        'at',
        'away',
        'below',
        'by',
        'for',
        'from',
        'in',
        'into',
        'of',
        'off',
        'on',
        'out',
        'to',
        'until',
        'with',
        'without',
        # conjunctions:
        'and',
        'but',
        'if',
        'or',
        'so',
        # abbreviations:
        'eg', 'ie',
        # nouns:
        'accompaniments',
        'blossoms',
        'bottoms', 'bottom',
        'choice',
        'directions',
        'ends', 'end',
        'fists', 'fist',
        'hands', 'hand',
        'hours', 'hour',
        'ingredients',
        'list',
        'minutes', 'minute',
        'slicer',
        'peeler',
        'product',
        'purpose',
        'reserve',
        'room',
        'seconds', 'second',
        'spirals', 'spiral',
        'temperature',
        'thickness',
        'thinness',
        'tops', 'top',
        # verbs:
        'add',
        'alternating',
        'are',
        'be',
        'discarding',
        'including',
        'is',
        'sit',
        'using',
    ]
    
    #print "Before..."
    #print full_ingred_list
    
    # strip punctuation chars
    # all lowercase
    if strip_punct:
        cleaned_ingred_list = [translate_non_alphanumerics(s).lower() for s in full_ingred_list]
    else:
        cleaned_ingred_list = full_ingred_list
    
    #print "length of cleaned_ingred_list: {}".format(len(cleaned_ingred_list))
    #print cleaned_ingred_list
    if len(cleaned_ingred_list) == 0:
        print "length of cleaned_ingred_list is zero"
        print "full_ingred_list:"
        print full_ingred_list
    
    # split on whitespace
    # throw out meas units
    #print
    #print "After..."
    if isinstance(cleaned_ingred_list[0], unicode):
        ingreds_only = [' '.join(w for w in unidecode.unidecode(ingred_item).split() if w not in meas_units and w not in preparatory_descriptions and w not in other_words_to_filter)
             for ingred_item in cleaned_ingred_list
             ]
    else:
        assert isinstance(cleaned_ingred_list[0], str)
        ingreds_only = [' '.join(w for w in ingred_item.split() if w not in meas_units and w not in preparatory_descriptions and w not in other_words_to_filter)
             for ingred_item in cleaned_ingred_list
             ]
    ingreds_only = filter(None, ingreds_only) # remove empty strings at end
    #print ingreds_only
    
    brand_names = [
        'a(r)', # A1 steak sauce
        'absolut(r)',
        'accents(r)', 'accents(tm)', 'accent(r)',
        'act ii(r)',
        'adams(r)',
        'al fresco(r)',
        'amafil(r)',
        'annies lemon chive dressing(r)',
        'archer farms(tm)',
        'arrowhead mills(r)',
        'artisan blends(r)',
        'aylmer(r) accents(r)',
        'babybel(r)',
        'bacardi (r)', 'bacardi(r)',
        'backdraft fire sauce(r)',
        'ball(r) kerr(r)',
        'ball park(r)',
        'barilla(r)',
        'barill pronto(tm)',
        'bay(r)', 'bay (tm)',
        'beau monde (tm)',
        'beechers(r) flagship', 'beechers flagship', 'beechers(r)',
        'beer shiner(r)',
        'belgioioso',
        'benedictine(r)',
        'bertolli(r)',
        'best foods(r)',
        'better than bouillon(r)',
        'betty crocker(r)',
        'birds eye(r)',
        'bisquick(r)',
        'bisquick (r)',
        'bobs red mill(r)',
        'borden(r)',
        'bragg(r)',
        'breeze(r)',
        'briannas home style(r)', 'briannas(r)',
        'brooks(r)',
        'bruces(r)',
        'budweiser(r)',
        'buitoni(r)',
        'bullseye(r)',
        'bumble bee(r)',
        'burnetts(r)',
        'bushs best(r)', 'bushs homestyle(r)', 'bushs chili magic(r)', 'bushs(r)',
        'butterball(r)',
        'butter buds(r)',
        'campari(r)',
        'campbells(r) healthy request', 'campbells(r)', 'campbells (r)',
        'carnation (r)',
        'carolina pride(r)',
        'carroll shelbys(r)',
        'cascadian farm(r)',
        'catelli bistro(r)',
        'cattlemens(r)',
        'cavenders(r)',
        'chambord(r)',
        'chef paul prudhommes salmon magic(r)',
        'cheese whiz(r)', 'cheez whiz(r)',
        'chobani(r)',
        'cholula(r)',
        'ciroc(r)',
        'clamato(r)',
        'classicmac(tm)',
        'classico (tm)',
        'classico (r)',
        'classico(r)',
        'claussen(r)',
        'coke(r)',
        'cointreau(r)',
        'college inn(r)',
        'contadina(r)',
        'cool whip(r)',
        'coors(r)',
        'cornnuts (r)',
        'corona(r)',
        'cortland',
        'country time(r)',
        'craisins(r)',
        'crazy steves(tm) cajun cukes', 'crazy steves(r)',
        'cremovo(r)',
        'crisco(r)',
        'daisy(r)',
        'dei fratelli(r)',
        'del monte(r)',
        'diamond crystal(r)',
        'dickinsons(r)',
        'dole(r)',
        'dole asian island crunch(tm)',
        'dole(r) veggie(tm)',
        'doritos(r)',
        'dubliner(r)',
        'dukes(r)',
        'duncan hines(r)',
        'durkee(r)', 'famous sauce(r)',
        'eagle brand(r)',
        'earth balance(r)',
        'eckrich(r)',
        'edward sons(r)',
        'egg beaters(r)',
        'el paso(r) ',
        'el pato(r)',
        'embasa(r)',
        'emerald(r)',
        'equal(r)',
        'farmland(r)',
        'fat tire(r)',
        'fiesta blend(r)',
        'fleischmanns(r)', 'fleischmanns ',
        'folgers(r)',
        'follow your heart(r) veganaise(r)', 'follow your heart(r)',
        'fosters (r)',
        'foster farms(r)',
        'franks(r) redhot', 'franks red hot (r)', 'franks redhot (r)', 'franks redhot(r)', 'redhot(r)', 'franks(r)',
        'frenchs(r)',
        'frichik(r)',
        'fritos(r)',
        'frontera(r)',
        'goya (r)', 'goya(r)',
        'gebhardt(r)',
        'ghirardelli(r)',
        'girards(r) olde venice',
        'good seasons(r)',
        'goodness(r)',
        'gourmet garden(tm)',
        'grapenuts(tm)',
        'great american spice co(tm)',
        'green giant(r)', 'green giant(tm) crumbles(r)', 'green giant(tm)',
        'grill mates(r)',
        'guinness(r)',
        'hangar one(r)',
        'harp(r)',
        'hatch(r)',
        'healthy choice(r)',
        'heineken(r)', 
        'heinz (r)', 'heinz(r)',
        "hellmann's(r) best foods(r)", 'hellmanns(r) best foods(r)', 'hellmanns(r)best foods(r)',
        'hellmanns light(r)', 'hellmans(r) light', 'hellmanns(r) low fat',
        'hellmans(r)', "hellmann's(r)", 'hellmanns(r)',
        'hershey(r)s', 'hershey(r)s kisses(r)', 'hersheys(r) chipits(r)', 'hersheys(r)',
        'hidden valley ranch(r)', 'hidden valley(r) original ranch(r)', 'hidden valley(r) ranch(r)', 'hidden valley(r)', 'hidden valley (r)',
        'hillshire farm(r)',
        'holland house(r)',
        'horizon(r)',
        'hormel(r)', 'hormel(tm)',
        'house tsang(r)',
        'hunts(r)',
        'idahoan(r)','baby reds(r)', 'buttery homestyle(r)',
        'imagine(r)', 'imagine(tm)',
        'isalys(r)',
        'jack daniels(r)',
        'jello(r)',
        'jennieo(r)',
        'jif(r)',
        'jiffy(r)',
        'jim beam(r)',
        'jimmy dean(r)',
        'johnsonville(r)',
        'johnnys seasoning salt(r)',
        'jose cuervo(r)', 'cuervo(r)',
        'kame(r)',
        'karo(r)',
        'karys(r)',
        'kc masterpiece(r)',
        'keebler club(r)', 'keebler(r)',
        'keens(r)',
        'kens steak house(r)',
        'kens steak house lite northern italian dressing(r)',
        'kerrygold(r)',
        'kewpie(r)',
        'kikkoman(r)',
        'king arthur(r)',
        'king oscar(r)',
        'kirkland(r)',
        'kitchen basics(r)',
        'kitchen bouquet(r)',
        'kitchen secrets(r)',
        'klondike gourmet(r)', 'klondike goldust(r)', 'klondike(r)',
        'knorr(r) rice sides(tm)', 'knorr(r) fiesta sides(tm)', 'knorr(r)', 'knorrs(r)',
        'knox (r)',
        'kraft(r)',
        'land o lakes(r)', 'land olakes(r)',
        'laphroiag(r)',
        'laughing cow(r)',
        'lawrys(r)',
        'libbys(r)',
        'lightlife(r) organic smoky tempeh strips(r)', 'lightlife(r)',
        'lipton(r) recipe secrets(r)', 'lipton(r)',
        'locatelli(r)',
        'loma linda(r)',
        'lotus(r)',
        'louisiana(r)',
        'maggi(r)',
        'magic(r)',
        'mahatma(r)',
        'maifun(r)',
        'maille(r)',
        'maldon(r)',
        'malibu(r)',
        'marie callenders(r)',
        'maries(r)',
        'market pantry(tm)',
        'martha white(r)',
        'mary kitchen(r)',
        'marzettis(r)',
        'maui(r)',
        'mazola(r)',
        'mccormick chili seasoning mix sodium(r)', 'mccormick(r)',
        'mexene(r)',
        'mexenes(r)',
        'mexicorn(r)',
        'miller lite(r)',
        'mimiccreme(r)',
        'minute(r)',
        'miracle whip(r)',
        'miracle whip(tm)',
        'miracle whip (tm)',
        'miracle whip free(r)',
        'miracle whip light(r)', 'light miracle whip(r)',
        'mission(r)',
        'montreal steak seasoning(r)',
        'morningstar farms(r) grillers recipe crumbles(r)', 'morningstar farms(r) recipe crumbles(r)', 'morningstar farms(r)',
        'morton(r) natures seasons(r)', 'mortons(r)', 'morton(r)',
        'motts(r)',
        'mountain dew(r)',
        'mrs butterworths(r)',
        'mrs dash(r)',
        'muir glen(r)',
        'nabisco(r)',
        'natural goodness(tm)',
        'negra modelo(r)',
        'nescafe(r)',
        'nestle(r) toll house(r)', 'nestle(r) carnation(r)', 'nestle(r)',
        'newcastle(r)',
        'newmans own(r)',
        'newmans own(r) lighten up(r)', 'lighten up(r)',
        'niblets(r)',
        'nissin(r) top ramen',
        'no yolks(r)',
        'ocean spray(r)',
        'oikos(r)',
        'old bay(r)', 'old bay (tm)', 'old bay(tm)',
        'old el paso(r)',
        'olive garden(r)',
        'oreida(r) steam n mash(r)', 'oreida(r)', 'ore ida(r)',
        'oreo(r)',
        'ortega(r)',
        'ottogi ramyonsari(r)', 'ottogi(r)',
        'pace(r)',
        'pam(r)',
        'parkay(r)',
        'pataks(r)',
        'penzeys(r)', 'penzys(r)',
        'pepperidge farm(r)',
        'perdue(r)',
        'pernod(r)',
        'perrins(r)',
        'pet(r)',
        'pillsbury grands(r)', 'pillsbury(r) grands(r)', 'pillsbury(r)',
        'planters(r)',
        'plochmans(r)',
        'prego(r)',
        'progresso(tm) recipe starters(tm)', 'progresso(r)',
        'quaker(r)',        
        'quorn(tm)',
        'ragu(r) old world style(r)', 'ragu(r)',
        'rapunzel(r)',
        'ready rice(r)',
        'realime(r)',
        'red gold(r)',
        'reddiwip(r)',
        'reeses(r)',
        'renees(r)',
        'reynolds wrap(r)', 'reynolds(r)',
        'rice sides(tm)',
        'ronzoni(r)',
        'rotel(r)',
        'rumford(r)',
        'saco(r)',
        'sambazon',
        'samuel smith(r)',
        'sargento(r)', 'sargento (r)',
        'sason accent(r)',
        'sb(r) golden curry', 'sb(r)',
        'seagrams(r)',
        'seasonall(r)',
        'shiner bock(r)',
        'silk(r)',
        'simple crisp(tm)',
        'simply balanced(tm)',
        'simply potatoes(r)',
        'skippy(r)',
        'skyline chili(r)',
        'slap ya mama(r)',
        'smart balance(r)',
        'smirnoff(r)',
        'smithfield(r)',
        'smuckers(r)',
        'snack factory(r)',
        'snickers(r)',
        'so delicious(r)',
        'southern comfort (r)',
        #'spam(r)',
        'spectrum naturals(r)', 'spectrum(r)',
        'spice islands(r)',
        'spike(r)',
        'splenda(r)',
        'sprite(r)',
        'sriracha(r)',
        'steam whistle pilsner(r)',
        'stovetop(r)',
        'sunmaid(r)',
        'sunsweet(r) dnoir(tm)',
        'sutton dodge(tm)',
        'swanson(r) vegetable flavor boost(r)', 'swanson(r)', 'natural goodness(r)',
        'sweet baby rays(r)',
        'sweetn low(r)',
        'tabasco(r)', 'tabasco(tm)',
        'taco bell(r)',
        'tajin(r)',
        'tapatio(r)',
        'tater tots(r)',
        'tenderflake(r)',
        'texas pete(r)', 'texas petess(r)',
        'thai kitchen(r)',
        'three bridges(r)',
        'tillamook(r)',
        'tony chacheres(r)',
        'top ramen(r)',
        'tostitos(r)',
        'trader joes(r)',
        'truroots(r)',
        'truvia(r)',
        'tyson(r) ready(r)', 'tyson(r)',
        'uncle bens (r)', 'uncle bens(r)',
        'up(r)', # 7-up
        'v(r)', # what remains from "V8"
        'valentina(r)',
        'vegenaise(r)',
        'veggie(tm)',
        #'velveeta(r)',
        'vernors(r)',
        'vidalia(r)',
        'vietti(r)',
        'vindaloo sauce maya kaimal(r)', 'vindaloo(r)',
        'voskos(r)',
        'watkins(r)',
        'wesson(r)',
        'white lily(r)',
        'wishbone(r)',
        'wolf brand (r)', 'wolf(r)',
        'wondra(r)',
        'yoplait(r)',
        'yuengling(r)',
        'yves veggie cuisine(r)',
        'zatarains(r)',
        'zing zang(r)',
    ]
    
    def remove_brands(ingred_str):
        str_without_brand = ingred_str
        for bn in brand_names:
            str_without_brand = str_without_brand.replace(bn, '')
        return str_without_brand
    
    ingreds_without_brands = [' '.join(remove_brands(ingred_str).strip().split()) for ingred_str in ingreds_only]
    
    def remove_duplicate_words(ingred_str):
        ingred_words = ingred_str.split()
        no_dupes_ingred_str = " ".join(sorted(set(ingred_words), key=ingred_words.index))
        return no_dupes_ingred_str
    
    ingreds_duplicates_removed = [remove_duplicate_words(ingred_str) for ingred_str in ingreds_without_brands]
    
    return ingreds_duplicates_removed
